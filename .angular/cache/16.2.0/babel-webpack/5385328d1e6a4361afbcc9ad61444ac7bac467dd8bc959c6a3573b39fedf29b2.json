{"ast":null,"code":"var _class;\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sidebar-state.service\";\nimport * as i2 from \"@angular/router\";\nfunction SidebarComponent_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Lorem, ipsum dolor sit amet consectetur.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class SidebarComponent {\n  clickOutside(event) {\n    if (this.sidebarStateService.isOpenValue) {\n      const clickedInside = this.elementRef.nativeElement.contains(event.target);\n      if (!clickedInside) {\n        this.sidebarStateService.toggle(false);\n      }\n    }\n  }\n  constructor(elementRef, sidebarStateService, router) {\n    this.elementRef = elementRef;\n    this.sidebarStateService = sidebarStateService;\n    this.router = router;\n    this.hoveredLinkContainer = null;\n    this.hoveredLink = null;\n    this.linkName = [{\n      link: 'realisations',\n      value: 'Réalisations'\n    }, {\n      link: 'professional',\n      value: 'Parcours Professionnel'\n    }, {\n      link: 'scholar',\n      value: 'Parcours Scolaire'\n    }, {\n      link: 'aboutme',\n      value: 'A propos de moi'\n    }];\n    this.isOpen$ = this.sidebarStateService.isOpen$;\n  }\n  toggle() {\n    this.sidebarStateService.toggle();\n  }\n  onMouseOver(link) {\n    this.hoveredLink = link.link;\n    this.hoveredLinkContainer = link.link;\n  }\n  onMouseLeave() {\n    this.hoveredLink = null;\n    this.hoveredLinkContainer = null;\n  }\n  onLinkClick(link) {\n    this.sidebarStateService.toggle();\n    this.router.navigate([link.link]);\n  }\n}\n_class = SidebarComponent;\n_class.ɵfac = function SidebarComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.SidebarStateService), i0.ɵɵdirectiveInject(i2.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-sidebar\"]],\n  hostBindings: function SidebarComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function SidebarComponent_click_HostBindingHandler($event) {\n        return ctx.clickOutside($event);\n      }, false, i0.ɵɵresolveDocument);\n    }\n  },\n  decls: 9,\n  vars: 4,\n  consts: [[1, \"sidebar_container\"], [\"mode\", \"side\", 1, \"example-sidenav\", 3, \"opened\"], [\"drawer\", \"\"], [4, \"ngIf\"], [\"mat-raised-button\", \"\", 3, \"click\"]],\n  template: function SidebarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-drawer\", 1, 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementStart(4, \"p\");\n      i0.ɵɵtext(5, \"Auto-resizing sidenav\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, SidebarComponent_p_6_Template, 2, 0, \"p\", 3);\n      i0.ɵɵelementStart(7, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function SidebarComponent_Template_button_click_7_listener() {\n        return ctx.showFiller = !ctx.showFiller;\n      });\n      i0.ɵɵtext(8, \" Toggle extra text \");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"opened\", i0.ɵɵpipeBind1(3, 2, ctx.isOpen$));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.showFiller);\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"],\n  data: {\n    animation: [trigger('linkContainerHover', [state('active', style({\n      backgroundColor: '#3b3b3b'\n    })), state('inactive', style({\n      backgroundColor: 'transparent'\n    })), transition('inactive <=> active', animate('0.25s ease-out'))])]\n  }\n});","map":{"version":3,"names":["trigger","state","style","animate","transition","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","SidebarComponent","clickOutside","event","sidebarStateService","isOpenValue","clickedInside","elementRef","nativeElement","contains","target","toggle","constructor","router","hoveredLinkContainer","hoveredLink","linkName","link","value","isOpen$","onMouseOver","onMouseLeave","onLinkClick","navigate","ɵɵdirectiveInject","ElementRef","i1","SidebarStateService","i2","Router","selectors","hostBindings","SidebarComponent_HostBindings","rf","ctx","$event","ɵɵresolveDocument","ɵɵtemplate","SidebarComponent_p_6_Template","ɵɵlistener","SidebarComponent_Template_button_click_7_listener","showFiller","ɵɵadvance","ɵɵproperty","ɵɵpipeBind1","backgroundColor"],"sources":["C:\\Users\\ASUS\\OneDrive\\Bureau\\MOOC\\mysite\\mysite\\src\\app\\components\\sidebar\\sidebar.component.ts","C:\\Users\\ASUS\\OneDrive\\Bureau\\MOOC\\mysite\\mysite\\src\\app\\components\\sidebar\\sidebar.component.html"],"sourcesContent":["import { Component, ElementRef, HostListener } from '@angular/core';\r\nimport { SidebarStateService } from '../../services/sidebar-state.service';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  trigger,\r\n  state,\r\n  style,\r\n  animate,\r\n  transition,\r\n} from '@angular/animations';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.scss'],\r\n  animations: [\r\n    trigger('linkContainerHover', [\r\n      state('active', style({ backgroundColor: '#3b3b3b' })),\r\n      state('inactive', style({ backgroundColor: 'transparent' })),\r\n      transition('inactive <=> active', animate('0.25s ease-out')),\r\n    ]),\r\n  ],\r\n})\r\nexport class SidebarComponent {\r\n  isOpen$: Observable<boolean>;\r\n  hoveredLinkContainer: string | null = null;\r\n  hoveredLink: string | null = null;\r\n\r\n  linkName: { link: string; value: string }[] = [\r\n    { link: 'realisations', value: 'Réalisations' },\r\n    { link: 'professional', value: 'Parcours Professionnel' },\r\n    { link: 'scholar', value: 'Parcours Scolaire' },\r\n    { link: 'aboutme', value: 'A propos de moi' },\r\n  ];\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  clickOutside(event: Event) {\r\n    if (this.sidebarStateService.isOpenValue) {\r\n      const clickedInside = this.elementRef.nativeElement.contains(\r\n        event.target\r\n      );\r\n      if (!clickedInside) {\r\n        this.sidebarStateService.toggle(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private sidebarStateService: SidebarStateService,\r\n    private router: Router\r\n  ) {\r\n    this.isOpen$ = this.sidebarStateService.isOpen$;\r\n  }\r\n\r\n  toggle() {\r\n    this.sidebarStateService.toggle();\r\n  }\r\n\r\n  onMouseOver(link: { link: string; value: string }) {\r\n    this.hoveredLink = link.link;\r\n    this.hoveredLinkContainer = link.link;\r\n  }\r\n\r\n  onMouseLeave() {\r\n    this.hoveredLink = null;\r\n    this.hoveredLinkContainer = null;\r\n  }\r\n\r\n  onLinkClick(link: { link: string; value: string }) {\r\n    this.sidebarStateService.toggle();\r\n    this.router.navigate([link.link]);\r\n  }\r\n}\r\n","<div class=\"sidebar_container\">\r\n  <mat-drawer\r\n    #drawer\r\n    class=\"example-sidenav\"\r\n    mode=\"side\"\r\n    [opened]=\"isOpen$ | async\"\r\n  >\r\n    <p>Auto-resizing sidenav</p>\r\n    <p *ngIf=\"showFiller\">Lorem, ipsum dolor sit amet consectetur.</p>\r\n    <button (click)=\"showFiller = !showFiller\" mat-raised-button>\r\n      Toggle extra text\r\n    </button>\r\n  </mat-drawer>\r\n</div>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}